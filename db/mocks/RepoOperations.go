// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// RepoOperations is an autogenerated mock type for the RepoOperations type
type RepoOperations struct {
	mock.Mock
}

// Append provides a mock function with given fields: msg
func (_m *RepoOperations) Append(msg string) error {
	ret := _m.Called(msg)

	if len(ret) == 0 {
		panic("no return value specified for Append")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(msg)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateTable provides a mock function with given fields:
func (_m *RepoOperations) CreateTable() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for CreateTable")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Fetch provides a mock function with given fields:
func (_m *RepoOperations) Fetch() (*[]string, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Fetch")
	}

	var r0 *[]string
	var r1 error
	if rf, ok := ret.Get(0).(func() (*[]string, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() *[]string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]string)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewRepoOperations creates a new instance of RepoOperations. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRepoOperations(t interface {
	mock.TestingT
	Cleanup(func())
}) *RepoOperations {
	mock := &RepoOperations{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
